# -*- coding: utf-8 -*-
"""Book_cosine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BNY5H2bVJY8QGNuEyXIjdMbW1wuWmUZY
"""

#과목과 가장 유사한 도서 : 물리학 
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
pd.set_option('display.max_seq_items', None)
book_df=pd.read_excel('books.xlsx', engine="openpyxl")
book_df.replace(to_replace=np.nan,value=0)
#print(book_df)
book_info=book_df['info']

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(book_info)
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
indices = pd.Series(book_df.index, index=book_df['title']).drop_duplicates()
# print(cosine_sim)
def get_recommendations(title, cosine_sim=cosine_sim):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores*500
    sim_max = sim_scores[1:4]
    book_indices = [i[0] for i in sim_max]
    book_sim = [i[0] and i[1] for i in sim_max]
    print(book_sim)
    return book_df['title'].iloc[book_indices] 

get_recommendations('물리학')

#도서와 도서간 유사도
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
data=pd.read_excel('과학 책.xlsx', engine="openpyxl")
index=[]
for i in range(29,68):
  index.append(int(i))
data.drop(index,inplace=True)
book_info=data['info']
#print(book_info)

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(book_info)
#print(tfidf_matrix.shape)
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
indices = pd.Series(data.index, index=data['title']).drop_duplicates()

def get_recommendations(title, cosine_sim=cosine_sim):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores*500
    sim_scores = sim_scores[1:4]
    book_indices = [i[0] for i in sim_scores]
    return data['title'].iloc[book_indices]
n=input()
get_recommendations(n)

#사용자 기반
import pandas as pd
import numpy as np

ratings = pd.read_csv('ratings.csv')
movies = pd.read_csv('movies.csv')

pd.set_option('display.max_columns', 6)
pd.set_option('display.width', 300)

movie_ratings = pd.merge(ratings, movies, on='movieId')
#print(movie_ratings)
title_user = movie_ratings.pivot_table('rating', index='userId', columns='title')
title_user.fillna(0, inplace=True)

from sklearn.metrics.pairwise import cosine_similarity

# 유저와 유저 간의 유사도
user_based_collab = cosine_similarity(title_user, title_user)
user_based_collab = pd.DataFrame(user_based_collab, index=title_user.index, columns=title_user.index)
#print(user_based_collab[1].sort_values(ascending=False)[:10])

user = user_based_collab[1].sort_values(ascending=False)[:5].index[1]
print(title_user.loc[user].sort_values(ascending=False))